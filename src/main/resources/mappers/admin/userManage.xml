<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="LacunaMatata.Lacuna.repository.admin.UserManageMapper">
    <resultMap id="userResultMap" type="LacunaMatata.Lacuna.entity.user.User">
        <id property="userId" column="user_id" />
        <result property="username" column="username" />
        <result property="name" column="name" />
        <result property="email" column="email" />
        <result property="password" column="password" />
        <result property="totalCount" column="totalCount" />
        <result property="socialLoginType" column="social_login_type" />
        <result property="passwordLastChanged" column="password_last_changed" />
        <result property="lastLoginDate" column="last_login_date" />
        <result property="createDate" column="created_date" />
        <result property="updateDate" column="update_date" />
        <result property="inactive" column="inactive" />
        <result property="loginIp" column="loginIp" />
        <result property="roleId" column="roleId" />
        <result property="roleName" column="roleName" />
        <association property="userOptionalInfo" resultMap="userOptionalInfoResultMap" />
        <association property="loginHistory" resultMap="loginHistoryResultMap" />
        <collection property="userRoleMets" resultMap="userRoleMetResultMap" />
    </resultMap>
    <resultMap id="userRoleMetResultMap" type="LacunaMatata.Lacuna.entity.user.UserRoleMet">
        <id property="userRoleMetId" column="user_role_met_id" />
        <result property="roleUserId" column="role_user_id" />
        <result property="roleId" column="role_id" />
        <result property="createDate" column="create_date" />
        <result property="updateDate" column="update_date" />
        <association property="userRole" resultMap="userRoleResultMap" />
    </resultMap>
    <resultMap id="userRoleResultMap" type="LacunaMatata.Lacuna.entity.user.UserRole">
        <id property="roleId" column="role_id" />
        <result property="roleName" column="role_name" />
        <result property="roleDescription" column="role_description" />
        <result property="roleImg" column="role_img" />
    </resultMap>
    <resultMap id="userOptionalInfoResultMap" type="LacunaMatata.Lacuna.entity.user.UserOptionalInfo">
        <id property="userOptionId" column="user_option_id" />
        <result property="userId" column="user_id" />
        <result property="birthDate" column="birth_date" />
        <result property="gender" column="gender" />
        <result property="phoneNumber" column="phone_number" />
        <result property="address" column="address" />
        <result property="profileImg" column="profile_img" />
        <result property="marketingReceiveAgreement" column="marketing_receive_agreement" />
        <result property="thirdPartyInfoSharingAgreement" column="third_party_info_sharing_agreement" />
        <result property="useConditionAgreement" column="use_condition_agreement" />
    </resultMap>
    <resultMap id="loginHistoryResultMap" type="LacunaMatata.Lacuna.entity.user.LoginHistory">
        <id property="loginHistoryId" column="login_history_id" />
        <result property="loginUserId" column="login_user_id" />
        <result property="loginTime" column="login_time" />
        <result property="loginIp" column="login_ip" />
    </resultMap>
    <insert id="saveUser" useGeneratedKeys="true" keyProperty="userId">
        insert into tb_user
        values(
            default,
            #{username},
            #{email},
            #{password},
            #{name},
            1,
            now(),
            now(),
            now(),
            now()
        )
    </insert>
    <insert id="saveUserOptionalInfo" useGeneratedKeys="true" keyProperty="userOptionId">
        insert into tb_user_optional_info
        values(
            default,
            #{userId},
            #{birthDate},
            #{gender},
            #{phoneNumber},
            "",
            default,
            2,
            1,
            1
        )
    </insert>
    <insert id="saveUserRoleMet">
        insert into tb_user_role_met
        values
        <foreach item="roleId" collection="roleIdList" separator=",">
            ( default, #{userId}, #{roleId}, now(), now() )
        </foreach>

    </insert>
    <update id="modifyUserRoleMetDate">
        update
            tb_user_role_met
        set
            update_date = now()
        where
            role_user_id = #{userId} and
            role_id in
            <foreach item="roleId" collection="roleIdList" open="(" separator="," close=")">
                #{roleId}
            </foreach>
    </update>
    <update id="modifyManagerInfo">
        update
            tb_user
        set
            password = #{password},
            email = #{email}
        where
            user_id = #{userId}
    </update>
    <update id="modifyManageOptionalInfo">
        update
            tb_user_optional_info
        set
            phone_number = #{phoneNumber},
            profile_img = #{profileImg}
        where
            user_id = #{userId}
    </update>
    <delete id="deleteByUserId">
        delete
        from
            tb_user
        where
            user_id = #{userId}
    </delete>
    <delete id="deleteByUserList">
        delete
        from
            tb_user
        where
            user_id in
        <foreach item="userId" collection="userIdList" open="(" separator="," close=")">
            #{userId}
        </foreach>
    </delete>
    <delete id="deleteUserRoleMet">
        delete
        from
            tb_user_role_met
        where
            role_user_id = #{userId} and
            role_id in
            <foreach item="roleId" collection="roleIdList" open="(" separator="," close=")">
                #{roleId}
            </foreach>
    </delete>
    <select id="getUserList" resultMap="userResultMap">
        select
            u.user_id,
            u.username,
            u.name,
            u.email,
            u.password,
            u.created_date,
            u.last_login_date,
            count(*) over () as totalCount,
            (select
                case when (datediff(now(), u.last_login_date)) > 365
                then "휴면 계정" else "활성화 계정" end) as inactive,
            (select lh.login_ip
            from tb_login_history lh
            where lh.login_user_id = u.user_id
            order by lh.login_time desc
            limit 1) as loginIp,
            (select ur.role_name
            from tb_user_role ur
            where ur.role_id = (select urm.role_id
                from tb_user_role_met urm
                where urm.role_user_id = u.user_id
                order by urm.role_id desc
                limit 1 )) as roleName,
            uoi.user_id,
            uoi.gender,
            uoi.birth_date
        from
            tb_user u
            left outer join tb_user_optional_info uoi on uoi.user_id = u.user_id
            left outer join tb_user_role_met urm on urm.role_user_id = u.user_id
            left outer join tb_user_role ur on ur.role_id = urm.role_id
        where
            1 = 1
            <if test="filter == 0">
                and 1 = 1
            </if>
            <if test="filter != null and filter != ''">
                and ur.role_id = #{filter}
            </if>
            <if test="option == 0">
                <if test="searchValue != null and searchValue != ''">
                    and u.name like concat('%', trim(ifnull(#{searchValue}, '')), '%')
                </if>
            </if>
            <if test="option == 1">
                <if test="searchValue != null and searchValue != ''">
                    and u.name like concat('%', trim(ifnull(#{searchValue}, '')), '%')
                </if>
            </if>
    </select>
    <select id="findUserById" resultMap="userResultMap">
        select
            u.user_id,
            u.username,
            u.name,
            u.email,
            u.password,
            u.created_date,
            u.last_login_date,
            (select ur.role_id
            from tb_user_role ur
            where ur.role_id = (select urm.role_id
            from tb_user_role_met urm
            where urm.role_user_id = u.user_id
            order by urm.role_id desc
            limit 1 )) as roleId,
            (select ur.role_name
            from tb_user_role ur
            where ur.role_id = (select urm.role_id
                from tb_user_role_met urm
                where urm.role_user_id = u.user_id
                order by urm.role_id desc
                limit 1 )) as roleName,
            case when (datediff(now(), u.last_login_date)) > 365
            then "휴면 계정" else "활성화 계정" end as inactive,
            (select lh.login_ip
            from tb_login_history lh
            where lh.login_user_id = #{userId}
            order by lh.login_time desc
            limit 1) as loginIp,
            uoi.gender,
            uoi.birth_date,
            uoi.phone_number,
            uoi.profile_img,
            urm.user_role_met_id,
            urm.role_user_id,
            urm.role_id,
            urm.create_date,
            urm.update_date
        from
            tb_user u
            left outer join tb_user_role_met urm on u.user_id = urm.role_user_id
            left outer join tb_user_optional_info uoi on uoi.user_id = u.user_id
        where
            u.user_id = #{userId}
    </select>
    <select id="getUserRole" resultMap="userRoleResultMap">
        select
            role_id,
            role_name,
            role_description,
            role_img
        from
            tb_user_role
    </select>
</mapper>