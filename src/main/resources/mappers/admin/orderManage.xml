<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="LacunaMatata.Lacuna.repository.admin.OrderManageMapper">
    <resultMap id="orderResultMap" type="LacunaMatata.Lacuna.entity.order.Order">
        <id property="orderId" column="order_id" />
        <result property="orderUserId" column="order_user_id" />
        <result property="totalAmount" column="total_amount" />
        <result property="status" column="status" />
        <result property="totalCount" column="totalCount" />
        <result property="name" column="name" />
        <result property="createdDate" column="created_date" />
        <result property="roleName" column="roleName" />
        <result property="paymentId" column="paymentId" />
        <result property="paymentMethod" column="paymentMethod" />
        <result property="productName" column="productName" />
        <association property="orderItemList" resultMap="orderItemResultMap" />
        <collection property="orderItem" javaType="java.util.ArrayList" resultMap="orderItemResultMap" />

    </resultMap>
    <resultMap id="orderItemResultMap" type="LacunaMatata.Lacuna.entity.order.OrderItem">
        <id property="orderItemId" column="order_item_id" />
        <result property="orderId" column="order_id" />
        <result property="orderProductId" column="order_product_id" />
        <result property="quantity" column="quantity" />
        <result property="productName" column="productName" />
        <result property="priceAtPurchase" column="price_at_purchase" />
    </resultMap>
    <resultMap id="orderResultMap2" type="LacunaMatata.Lacuna.dto.response.admin.order.RespGetOrderDetailDto">
        <id property="orderId" column="order_id" />
        <result property="totalAmount" column="total_amount" />
        <result property="status" column="status" />
        <result property="name" column="name" />
        <result property="createdDate" column="created_date" />
        <result property="paymentMethod" column="paymentMethod" />
        <result property="paymentId" column="paymentId" />
        <collection property="orderDetailItem" javaType="java.util.ArrayList" resultMap="orderItemResultMap2" />
    </resultMap>
    <resultMap id="orderItemResultMap2" type="LacunaMatata.Lacuna.dto.response.admin.order.RespGetOrderItemDetailDto">
        <id property="orderItemId" column="order_item_id" />
        <result property="orderId" column="order_id" />
        <result property="quantity" column="quantity" />
        <result property="productName" column="productName" />
        <result property="priceAtPurchase" column="price_at_purchase" />
    </resultMap>
    <resultMap id="paymentResultMap" type="LacunaMatata.Lacuna.entity.order.Payment">
        <id property="paymentId" column="payment_id" />
        <result property="paymentOrderId" column="payment_order_id" />
        <result property="paymentApproveId" column="payment_approve_id" />
        <result property="paymentMethod" column="payment_method" />
        <result property="amount" column="amount" />
        <result property="paymentStatus" column="payment_status" />
        <result property="createdDate" column="created_date" />
        <result property="name" column="name" />
    </resultMap>
    <insert id="cancelAccountPayment">
        insert into tb_payment
        values(
            default,
            #{orderId},
            #{paymentApproveId},
            "계좌이체",
            0,
            "failed",
            now()
        )
    </insert>
    <delete id="deleteOrder">
        delete
        from
            tb_order
        where
            order_id = #{orderId}
    </delete>
    <delete id="deleteOrderList">
        delete
        from
            tb_order
        where
            order_id in
            <foreach item="orderId" collection="orderIdList" open="(" separator="," close=")">
                #{orderId}
            </foreach>
    </delete>

    <update id="cancelSystemOrder">
        update tb_order
        set
            status = "Cancelled"
        where
            order_id = (select p.payment_order_id
                from tb_payment p
                where p.payment_id = #{paymentId})
    </update>
    <update id="cancelSystemPayment">
        update tb_payment
        set
            payment_status = "Cancelled"
        where
            payment_id = #{paymentId}
    </update>
    <update id="cancelAccountOrder">
        update tb_order
        set
            status = "Cancelled"
        where
            order_id = #{orderId}
    </update>
    <update id="approveAccountOrder">
        update tb_order
        set
            status = "Completed"
        where
            order_id = #{orderId}
    </update>
    <update id="approveAccountPayment">
        update tb_payment
        set
            payment_status = "Completed"
        where
            payment_order_id = #{orderId}
    </update>

    <select id="getOrderList" resultMap="orderResultMap">
        select
            o.order_id,
            o.order_user_id,
            o.total_amount,
            o.status,
            o.created_date,
            count(*) over () as totalCount,
            (select name
            from tb_user u
            where u.user_id = o.order_user_id) as name,
            (select role_name
            from tb_user_role ur
            where ur.role_id = (select urm.role_id
                from tb_user_role_met urm
                where o.order_user_id = urm.role_user_id
                order by urm.role_id desc
                limit 1)) as roleName,
            (select p.payment_id
            from tb_payment p
            where p.payment_order_id = o.order_id) as paymentId
        from
            tb_order o
            left outer join tb_user u on u.user_id = o.order_user_id
            left outer join tb_user_role_met urm on urm.role_user_id = u.user_id
            left outer join tb_user_role ur on ur.role_id = urm.role_id
        where
            1 = 1
            <if test="filter == 1">
                and o.status = 'pending'
            </if>
            <if test="filter == 2">
                and o.status = 'completed'
            </if>
            <if test="filter == 3">
                and o.status = 'cancelled'
            </if>
            <if test="option == 1">
                <if test="searchValue != null and searchValue != ''">
                    and u.name like concat('%', trim(ifnull(#{searchValue}, '')), '%')
                </if>
            </if>
        group by
            o.order_id
        limit
            #{startIndex}, #{limit}
    </select>
    <select id="getOrderStatusFilter" resultMap="orderResultMap">
        select
            order_id,
            status
        from
            tb_order
        group by
            status
    </select>

    <select id="findOrderById" resultMap="orderResultMap2">
        select
            o.order_id,
            o.total_amount,
            o.status,
            o.created_date,
            (select name
            from tb_user u
            where u.user_id = o.order_user_id) as name,
            (select payment_method
            from tb_payment p
            where p.payment_order_id = o.order_id) as paymentMethod,
            oi.order_item_id,
            oi.order_id,
            oi.quantity,
            oi.price_at_purchase,
            (select product_name
            from tb_product p
            where p.product_id = oi.order_product_id) as productName,
            (select p.payment_id
            from tb_payment p
            where p.payment_order_id = o.order_id) as paymentId
        from
            tb_order o
            left outer join tb_order_item oi on oi.order_id = o.order_id
        where
            o.order_id = #{orderId}
    </select>
    <select id="getPaymentDetail" resultMap="paymentResultMap">
        select
            payment_id,
            payment_order_id,
            payment_approve_id,
            payment_method,
            amount,
            payment_status,
            created_date,
            (select u.name
            from tb_user u
            where u.user_id = (select o.order_user_id
                from tb_order o
                where o.order_id = payment_order_id)) as name
        from
            tb_payment
        where
            payment_id = #{paymentId}
    </select>
    <select id="getOrder" resultType="LacunaMatata.Lacuna.entity.order.Order">
        select
            o.*,
            oi.*,
            pay.*,
            p.*
        from
            tb_order o
        where
            left tb_order_item oi on o.order_id = oi.order_id
            left tb_payment pay on o.order_id = pay.payment_order_id
            left tb_product p on oi.order_product_id = p.product_id
    </select>
    <select id="getPaymentAmount" resultMap="paymentResultMap">
        select
            payment_id,
            payment_order_id,
            amount
        from
            tb_payment
        where
            payment_order_id = #{orderId}
    </select>
</mapper>