<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="LacunaMatata.Lacuna.repository.user.UserMapper">
    <resultMap id="loginHistoryResultMap" type="LacunaMatata.Lacuna.entity.user.LoginHistory">
        <id property="loginHistoryId" column="login_history_id" />
        <result property="loginUserId" column="login_user_id" />
        <result property="loginTime" column="login_time" />
        <result property="loginIp" column="login_ip" />
    </resultMap>
    <resultMap id="UserResultMap" type="LacunaMatata.Lacuna.entity.user.User">
        <id property="userId" column="user_id" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="email" column="email" />
        <result property="name" column="name" />
        <result property="lastLoginDate" column="last_login_date" />
        <result property="createDate" column="created_date" />
        <result property="roleName" column="roleName" />
        <association property="userOptionalInfo" resultMap="userOptionalInfoResultMap" />
        <collection property="userRoleMets" javaType="java.util.Set" resultMap="userRoleMetsResultMap" />
    </resultMap>
    <resultMap id="userRoleMetsResultMap" type="LacunaMatata.Lacuna.entity.user.UserRoleMet">
        <id property="userRoleMetId" column="user_role_met_id" />
        <result property="roleUserId" column="role_user_id" />
        <result property="roleId" column="role_id" />
        <association property="userRole" resultMap="userRoleResultMap" />
    </resultMap>
    <resultMap id="userRoleResultMap" type="LacunaMatata.Lacuna.entity.user.UserRole">
        <id property="roleId" column="role_id" />
        <result property="roleName" column="role_name" />
        <result property="roleDescription" column="role_description" />
        <result property="roleImg" column="role_img" />
    </resultMap>
    <resultMap id="userOptionalInfoResultMap" type="LacunaMatata.Lacuna.entity.user.UserOptionalInfo">
        <id property="userOptionId" column="user_option_id" />
        <result property="userId" column="user_id" />
        <result property="birthDate" column="birth_date" />
        <result property="gender" column="gender" />
        <result property="phoneNumber" column="phone_number" />
        <result property="address" column="address" />
        <result property="profileImg" column="profile_img" />
        <result property="marketingReceiveAgreement" column="marketing_receive_agreement" />
        <result property="thirdPartyInfoSharingAgreement" column="third_party_info_sharing_agreement" />
        <result property="useConditionAgreement" column="use_condition_agreement" />
    </resultMap>
    <resultMap id="socialLoginResultMap" type="LacunaMatata.Lacuna.entity.user.SocialLogin">
        <id property="socialLoginId" column="social_login_id" />
        <result property="socialUserId" column="social_user_id" />
        <result property="socialId" column="social_id" />
        <result property="provider" column="provider" />
    </resultMap>
    <resultMap id="mbtiResultResultMap" type="LacunaMatata.Lacuna.entity.mbti.MbtiResult">
        <id property="mbtiResultId" column="mbti_result_id" />
        <result property="mbtiResultCategoryName" column="mbti_result_category_name" />
        <result property="mbtiResultTitle" column="mbti_result_title" />
        <result property="mbtiResultSummary" column="mbti_result_summary" />
        <result property="mbtiResultContent" column="mbti_result_content" />
        <result property="mbtiResultImg" column="mbti_result_img" />
    </resultMap>
    <resultMap id="kakaoResultMap" type="java.lang.String">
        <result property="value" column="value" />
    </resultMap>
    <insert id="saveUser" useGeneratedKeys="true" keyProperty="userId">
        insert into tb_user
        values(
            default,
            #{username},
            #{email},
            #{password},
            #{name},
            default,
            now(),
            now(),
            now(),
            now()
        )
    </insert>
    <insert id="saveUserOptionalInfo" useGeneratedKeys="true" keyProperty="userOptionId">
        insert into tb_user_optional_info
        values(
            default,
            #{userId},
            #{birthDate},
            #{gender},
            #{phoneNumber},
            #{address},
            default,
            #{marketingReceiveAgreement},
            #{thirdPartyInfoSharingAgreement},
            #{useConditionAgreement}
        )
    </insert>
    <insert id="saveUserRoleMet">
        insert into tb_user_role_met
        values
            <foreach item="roleId" collection="roleIdList" separator=",">
                ( default, #{userId}, #{roleId}, now(), now() )
            </foreach>
    </insert>
    <insert id="saveOauthInfo" useGeneratedKeys="true" keyProperty="socialLoginId">
        insert into tb_social_login
        values(
            default,
            #{socialUserId},
            #{socialId},
            #{provider}
        )
    </insert>
    <insert id="saveLoginHistory" useGeneratedKeys="true" keyProperty="loginHistoryId">
        insert into tb_login_history
        values(
            default,
            #{loginUserId},
            now(),
            #{loginIp}
        )
    </insert>
    <insert id="savePasswordHistory">
        insert into tb_password_history
        values(
            default,
            #{historyUserId},
            #{password},
            now()
        )
    </insert>
    <update id="modifyLoginDate">
        update tb_user
        set
            last_login_date = now()
        where
            user_id = #{userId}
    </update>
    <update id="modifyPassword">
        update tb_user
        set
            password = #{modifyPassword},
            password_last_changed = now(),
            update_date = now()
        where
            user_id = #{userId}
    </update>
    <update id="modifyPhoneNumber">
        update tb_user_optional_info
        set
            phone_number = #{phoneNumber}
        where
            user_id = #{userId}
    </update>
    <update id="modifyMyProfileImg">
        update tb_user_optional_info
        set
            profile_img = #{profileImg}
        where
            user_id = #{userId}
    </update>
    <update id="modifyMyEmail">
        update tb_user
        set
            email = #{email}
        where
            user_id = #{userId}
    </update>
    <update id="changeMarketingAgreement">
        update tb_optional_info
        set
            marketing_receive_agreement = #{marketingReceiveAgreement}
        where
            user_id = #{userId}
    </update>

    <delete id="deleteUser">
        delete
        from
            tb_user
        where
            user_id = {userId}
    </delete>
    <delete id="deleteUserOptionalInfo">
        delete
        from
            tb_user_optional_info
        where
            user_id = {userId}
    </delete>
    <delete id="deleteUserRoleMet">
        delete
        from
            tb_user_role_met
        where
            user_id = {userId}
    </delete>
    <delete id="deleteOauthInfo">
        delete
        from
            tb_social_login
        where
            user_id = {userId}
    </delete>
    <select id="findLoginHistoryByUserId" resultMap="loginHistoryResultMap">
        select
            *
        from
            tb_login_history
        where
            login_user_id = #{userId}
    </select>

    <select id="findUserByUserId" resultMap="UserResultMap">
        select
            u.user_id,
            u.username,
            u.email,
            u.password,
            u.name,
            u.last_login_date,
            u.created_date,
            (select role_name
            from tb_user_role ur
            where ur.role_id = (select urm.role_id
                from tb_user_role_met urm
                where urm.role_user_id = u.user_id
                order by role_id desc
                limit 1)) as roleName,
            urm.user_role_met_id,
            urm.role_user_id,
            urm.role_id,
            ur.role_id,
            ur.role_name,
            ur.role_img,
            uoi.user_id,
            uoi.user_option_id,
            uoi.birth_date,
            uoi.gender,
            uoi.phone_number,
            uoi.address,
            uoi.profile_img,
            uoi.marketing_receive_agreement,
            uoi.third_party_info_sharing_agreement,
            uoi.use_condition_agreement
        from
            tb_user u
            left outer join tb_user_role_met urm on(u.user_id = urm.role_user_id)
            left outer join tb_user_role ur on(urm.role_id = ur.role_id)
            left outer join tb_user_optional_info uoi on(uoi.user_id = u.user_id)
        where
            u.user_id = #{userId}
    </select>
    <select id="findUserByUsername" resultMap="UserResultMap">
        select
            u.user_id,
            u.username,
            u.email,
            u.password,
            u.name,
            u.last_login_date,
            u.created_date,
                (select role_name
                from tb_user_role ur
                where ur.role_id = (select urm.role_id
                    from tb_user_role_met urm
                    where urm.role_user_id = u.user_id
                    order by role_id desc
                    limit 1)) as roleName,
            urm.user_role_met_id,
            urm.role_user_id,
            urm.role_id,
            ur.role_id,
            ur.role_name,
            ur.role_img,
            uoi.user_id,
            uoi.user_option_id,
            uoi.birth_date,
            uoi.gender,
            uoi.phone_number,
            uoi.address,
            uoi.profile_img,
            uoi.marketing_receive_agreement,
            uoi.third_party_info_sharing_agreement,
            uoi.use_condition_agreement
        from
            tb_user u
            left outer join tb_user_role_met urm on(u.user_id = urm.role_user_id)
            left outer join tb_user_role ur on(urm.role_id = ur.role_id)
            left outer join tb_user_optional_info uoi on(uoi.user_id = u.user_id)
        where
            u.username = #{username}
    </select>
    <select id="findUserByEmail" resultMap="UserResultMap">
        select
            u.user_id,
            u.username,
            u.email,
            u.password,
            u.name,
            u.last_login_date,
            u.created_date,
            u.created_date,
            (select role_name
            from tb_user_role ur
                where ur.role_id = (select urm.role_id
                from tb_user_role_met urm
                where urm.role_user_id = u.user_id
                order by role_id desc
                limit 1)) as roleName,
            urm.user_role_met_id,
            urm.role_user_id,
            urm.role_id,
            ur.role_id,
            ur.role_name,
            ur.role_img,
            uoi.user_id,
            uoi.user_option_id,
            uoi.birth_date,
            uoi.gender,
            uoi.phone_number,
            uoi.address,
            uoi.profile_img,
            uoi.marketing_receive_agreement,
            uoi.third_party_info_sharing_agreement,
            uoi.use_condition_agreement
        from
            tb_user u
            left outer join tb_user_role_met urm on(u.user_id = urm.role_user_id)
            left outer join tb_user_role ur on(urm.role_id = ur.role_id)
            left outer join tb_user_optional_info uoi on(uoi.user_id = u.user_id)
        where
            u.email = #{email}
    </select>
    <select id="findUserRoleByRoleId" resultMap="userRoleResultMap">
        select
            role_id,
            role_name,
            role_description,
            role_img
        from
            tb_user_role
        where
            role_id = #{roleId}
    </select>
    <select id="findUserBySocialId" resultMap="UserResultMap">
        select
            u.user_id,
            (select ur.role_name
            from tb_user_role ur
            where ur.role_id = (select urm.role_id
            from tb_user_role_met urm
            where urm.role_user_id = (select sl.social_user_id
                from tb_social_login sl
                where sl.social_id = #{socialId})
            order by urm.role_id desc
            limit 1 )) as roleName
        from
            tb_user u
        where
            u.user_id = (select sl.social_user_id
            from tb_social_login sl
            where sl.social_id = #{socialId})
    </select>
    <select id="getMyMbtiResult" resultMap="mbtiResultResultMap">
        select
            mbti_result_id,
            mbti_result_category_name,
            mbti_result_title,
            mbti_result_summary,
            mbti_result_content,
            mbti_result_img
        from
            tb_mbti_result
        where
            mbti_result_id = (select mbti_result_id
                from tb_mbti_response
                where mbti_response_user_id = #{userId}
                order by create_date desc
                limit 1)
    </select>
    <select id="getKakaoAddress" resultMap="kakaoResultMap">
        select
            value
        from
            tb_setting
        where
            data_type = "Kakao Plus"
    </select>
</mapper>